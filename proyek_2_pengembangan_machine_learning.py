# -*- coding: utf-8 -*-
"""Proyek 2 Pengembangan Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z4ujWXr_HeCesdW-aB_iJguDG0a4prHi
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split

data = pd.read_csv('daily_minimum_temperature.csv')
data

data.isnull().sum()

data['Daily minimum temperatures'] = pd.to_numeric(data['Daily minimum temperatures'], errors='coerce')
mean_temp = data['Daily minimum temperatures'].mean()
data['Daily minimum temperatures'].fillna(mean_temp, inplace=True)
threshold_mae = (data['Daily minimum temperatures'].max() - data['Daily minimum temperatures'].min()) * 10/100
print("Threshold MAE: ", threshold_mae)
data.isnull().sum()

train_data, val_data = train_test_split(data, test_size=0.2, shuffle=False)
# Mengambil kolom 'Daily minimum temperatures' untuk training set
train_temp = train_data['Daily minimum temperatures'].values

# Mengambil kolom 'Daily minimum temperatures' untuk validation set
val_temp = val_data['Daily minimum temperatures'].values

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(train_temp, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(val_temp, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True, dropout=0.2),
  tf.keras.layers.LSTM(60, dropout=0.2),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

class Callback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<threshold_mae and logs.get('val_mae')<threshold_mae):
      print("reached")
      self.model.stop_training = True
callbacks = Callback()

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(), optimizer=optimizer, metrics=["mae"])
history = model.fit(train_set, validation_data=val_set, epochs=100, callbacks=[callbacks])